{
  "name": "rungler-session-3-sync",
  "modulation": {
    "code": "import(\"stdfaust.lib\");\n\nui(x) = tgroup(\"Euclid Van der Pol\", x);\nuiseq(x) = ui(hgroup(\"[1]EuClk\", x));\nuirung(x) = ui(hgroup(\"[2]Rungler\", x));\n\nN = uiseq(vslider(\"[0]N\", 15, 2, 21, 1));\nCLK = uiseq(vslider(\"[0]Clock [scale:log] [unit: bpm]\", 200, 10, 900, 0.1)) : /(60) : si.smoo;\nK1 = uiseq(vslider(\"[1]K1\", 2, 2, 21, 1)) : min(N);\nK2 = uiseq(vslider(\"[4]K2\", 7, 2, 21, 1)) : min(N);\n// K3 = uiseq(vslider(\"[7]K3\", 9, 2, 21, 1)) : min(N);\n\neuclid(n, k, clock) = clock : counter : _ with {\n    counter(imp) = (_counter ~ (_,_))(imp) : !,!,_ with {\n        _counter(_i, _e, imp) = i, e, trig with {\n            i = (_i + imp) % n;\n            e = ba.if(imp, descent, _e);\n            descent = (k * _i) % n >= (k * i) % n;\n            trig = imp * e;\n        };\n    };\n};\n\nmclk = os.lf_imptrain(CLK);\n\neclk = mclk <: e1, e2 with {\n  e1(clk) = clk : euclid(N, K1);\n  e2(clk) = clk : euclid(N, K2); \n  // e3(clk) = clk : euclid(N, K3); \n};\n\n\n// rungler circuit (7-bit register, 3-bit dac)\nrungler73(shuf, data, clock) = data : shift : dac with {\n    // shift register\n    shift = head : tail with {\n        // first cells simply pass their output forward\n        head = latch(clock : @(6)) : latch(clock : @(5)) : latch(clock : @(4)) : latch(clock : @(3));\n        \n        // last 3 cells split their output (to be fed into a 3-bit DAC) \n        tail = latch(clock : @(2)) <: _, (latch(clock : @(1)) <: _, latch(clock));\n\n        // latch cell implementation\n        latch(trig, in) = (trig, in) : (cell ~ _) with {\n            cell(val, trig, in) = select2(trig, val, in) : _;\n        };\n    };\n    // only sample new shuf values on clock signal\n    sshuf = shuf : ba.sAndH(clock);\n    \n    dac(x, y, z) = 4*x + shuffle(2*y + z) : int with {\n        // shuffle input bits based on a seed\n        shuffle(v) = ((v + a) * b) % 4 with {\n            a = int(sshuf/2);\n            b = select2(sshuf%2, 1, 3);\n        };\n    };\n};\n\n\n// utility function\nclip(x) = select2(x>1, x, 1);\n\n// clock divider\ncdiv(ratio, in) = select2(ratio==1, div, in) with {\n    div = in : (inc(ratio) ~ _) <: -(mem)<0 with {\n        inc(r, current, in) = current + in/r : clip : ma.frac;\n    };\n};\n\n\n// polyrhythm setup\npr = 2 * (int(uiShape * 2.99) + 1) + 1;\nprs = 2 * pr * uiRatio;\n\n\n// main sampling clocks\n// clk = os.lf_imptrain(uiClockFreq * pow(1.3, no.lfnoise(0.07)) * pow(1.1, no.lfnoise(2.31))) <: _, cdiv(prs) : poly(2,pr), poly(2,pr) : _,_ with {\n//     // polyrhythm generator\n//     poly(r1, r2) = _ <: cdiv(r1), cdiv(r2) :> clip;\n// };\n\n\n// data line\ndata = os.lf_imptrain(df) <: _, cdiv(prs) : sq, sq : _,_ with {\n    sq(imp) = imp : (toggle ~ _) with {\n        toggle(state, imp) = ba.if(imp>0, 1-state, state);\n    };\n    // data line frequency\n    df = si.interpolate(cycle(uiShape), 1, 11) * 2 with {\n        // cycles from 0 to 1 two times when x goes 0..1\n        cycle(x) = 1 - 0.5 * (1 + cos(x * 4 * ma.PI));\n    };\n};\n\nrungler = eclk, data : router : rungler73(shuf), rungler73(shuf) : mask : norm, norm  with {\n    router(c1, c2, d1, d2) = d1, c1, d2, c2;\n\n    // dac shuffle covers integer range [0..7] when shape goes 0..1\n    shuf = int(uiShape * 7.99);\n\n    // \"flatten\" pwm duty cycle to make it spend more time closer to 0.5  \n    // duty = 0.5 * (1 + (2*density-1)^3);\n\n    // density mask (sample and hold via pwm wave)\n    mask = skip, _ with {\n        skip(x) = x : ba.sAndH(os.lf_pulsetrainpos(pwmff(norm(x)), uiDensity)) with {\n            // rungler output value sets the 'density' complex parameter\n            pwmff(xdens) = fbase * fm with {\n                // pwm base frequency rushes from f down to 0.1 when desity goes from 1 to 0\n                fbase = si.interpolate(xdens^5, 0.1, uiClockFreq);\n\n                // vary pwm frequency more aggressively in certain ranges\n                entropy = (0.5 * (1 + sin(xdens * 1.5 * ma.PI)))^3;\n                \n                // leads to 'bursts' of slowly varying length\n                fm = pow(1.3, entropy * no.lfnoise(0.1 + xdens));\n            };\n        };\n    };\n\n    norm(x) = x / 7;\n};\n\nuiClockFreq = CLK * 4; // hslider(\"[1]Clock\", 11.61, 0.1, 20, 0.01);\nuiShape = uirung(hslider(\"[2]Data\", 0.22, 0, 1, 0.01));\nuiDensity = uirung(hslider(\"[3]Density\", 0.7, 0, 1, 0.01));\nuiRatio = uirung(hslider(\"[4]Fugue Ratio\", 2, 1, 16, 1)) : int;\n\nprocess = (r1, r2) with {\n  r1 = rungler : _,!;\n  r2 = rungler : !,_;\n};",
    "params": {
      "/Euclid Van der Pol/EuClk/Clock": 203.8649107152844,
      "/Euclid Van der Pol/EuClk/N": 14.16,
      "/Euclid Van der Pol/EuClk/K1": 6.75,
      "/Euclid Van der Pol/Rungler/Data": 0.69,
      "/Euclid Van der Pol/Rungler/Density": 0.54,
      "/Euclid Van der Pol/EuClk/K2": 4.279999999999999,
      "/Euclid Van der Pol/Rungler/Fugue Ratio": 8.8
    },
    "mods": {
      "/Euclid Van der Pol/EuClk/Clock": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/EuClk/N": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/EuClk/K1": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Rungler/Data": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Rungler/Density": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/EuClk/K2": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Rungler/Fugue Ratio": {
        "source": "-",
        "amount": 0
      }
    },
    "scopes": [
      "r1",
      "r2",
      "shsq"
    ]
  },
  "synth": {
    "code": "import(\"stdfaust.lib\");\n\nui(x) = tgroup(\"Euclid Van der Pol\", x);\nuiseq(x) = ui(hgroup(\"[1]Sequencer\", x));\n\nN = uiseq(vslider(\"[0]N\", 15, 2, 21, 1));\nCLK = uiseq(vslider(\"[0]Clock [scale:log] [unit: bpm]\", 200, 10, 900, 0.1)) : /(60) : si.smoo;\nK1 = uiseq(vslider(\"[1]K1\", 2, 2, 21, 1)) : min(N);\nK2 = uiseq(vslider(\"[4]K2\", 7, 2, 21, 1)) : min(N);\nK3 = uiseq(vslider(\"[7]K3\", 9, 2, 21, 1)) : min(N);\n\nclock = os.lf_imptrain(CLK);\n\n/* \nideal syntax below (maybe write a pre-processor)\n\ncounter(imp) = trig with {\n    i = (i' + imp) % n;\n    e = ba.if(imp, descent, e');\n    descent = (k * i') % n >= (k * i) % n;\n    trig = imp * e;\n}\n*/\n\neuclid(n, k, clock) = clock : counter : _ with {\n    counter(imp) = (_counter ~ (_,_))(imp) : !,!,_ with {\n        _counter(_i, _e, imp) = i, e, trig with {\n            i = (_i + imp) % n;\n            e = ba.if(imp, descent, _e);\n            descent = (k * _i) % n >= (k * i) % n;\n            trig = imp * e;\n        };\n    };\n};\n\nuio1(x) = ui(hgroup(\"[2]Osc 1\", x));\nuio2(x) = ui(hgroup(\"[3]Osc 2\", x));\nuio3(x) = ui(hgroup(\"[4]Osc 3\", x));\n\nquant = qu.quantize(55, qu.mixo);\n\n// Forced Van der Pol oscillator\nfvdp(trig) = trig : resonator <: dry, wet : interprod with {\n  dry = _ : *(uiDrive) : ma.tanh;\n  wet = _ : (loop ~ (_,_)) : par(i, 2, out) : spread;  \n  \n  // driving source\n  resonator(trig) = trig : pm.strike(0.2, 0.2, 0.5) : fi.nlf2(uiFreq, 1 - 1/uiQ) : _,!;\n\n  // signal conditioning block\n  // (saturation with variable limit) -> (dc blocker with variable frequency)\n  sblock(x) = x : /(uiLim) : ma.tanh : *(uiLim) : fi.highpass(1, uiHP);\n\n  loop(x, y, osc) = sblock(x1), sblock(y1) with {\n    x1 = x + uiDt * y;\n    y1 = y + uiDt * (uiEps * y * (1 - x^2) - x + uiForce * osc);\n  };\n\n  out = /(uiLim) : *(uiDrive) : ma.tanh;\n\n  spread(x, y) = x, y : si.interpolate(uiSpread);\n\n  // 3-way mixer, interpolates between 3 signals based on a [0..1] value\n  mix3(v, x, y, z) = gX * x + gY * y + gZ * z with {\n      gX = ba.listInterp((1, 0, 0), v * 2);\n      gY = ba.listInterp((0, 1, 0), v * 2);\n      gZ = ba.listInterp((0, 0, 1), v * 2);\n  };\n\n  // interpolate between two signals through their product\n  interprod(a, b) = mix3(uiDryWet, a, a*b, b);\n  \n  uiFreq = vslider(\"[1]Freq [unit:Hz] [scale:log]\", 55, 0.1, 16000, 0.01) : quant : si.smoo;\n  uiQ = vslider(\"[2]Q\", 14, 1.1, 20, 0.01) : ^(4) : si.smoo;\n\n  uiForce = vslider(\"[3]Force\", 0.5, 0.001, 1, 0.01) : ^(2) : *(100) : si.smoo;\n  uiEps = vslider(\"[4]Feedback\", 0.1, 0, 1, 0.00001) : ^(2) : *(50) : si.smoo;\n  uiDt = vslider(\"[5]dt\", 1, 0.1, 20, 0.001) : /(50) : si.smoo;\n  uiLim = vslider(\"[6]Limit\",  0.1, 0.0001, 1, .000001) : ^(2) : *(100) : si.smoo;\n  uiHP = vslider(\"[7]DC Block [scale:log]\", 10, 0.5, 220, 0.001) : si.smoo;\n  \n  uiSpread = vslider(\"[81]Spread\", 0.42, 0, 1, 0.01) : si.smoo;\n  uiDryWet = vslider(\"[82]DistAmt\", 0.21, 0, 1, 0.01) : si.smoo;\n  \n  uiDrive = vslider(\"[90]Drive\", 0.3, 0, 1, 0.001) : ^(4) : *(11) : si.smoo;\n};\n\neseq(clock) = clock <: euclid(N, K1), euclid(N, K2), euclid(N, K3);\n\nprocess = clock : eseq : uio1(fvdp), uio2(fvdp), uio3(fvdp) :> /(3) <: ui(dm.zita_light) : _,_;\n",
    "params": {
      "/Euclid Van der Pol/Sequencer/Clock": 200,
      "/Euclid Van der Pol/Sequencer/N": 15,
      "/Euclid Van der Pol/Zita Light/Dry/Wet Mix": 0,
      "/Euclid Van der Pol/Sequencer/K1": 2,
      "/Euclid Van der Pol/Osc 1/Freq": 800,
      "/Euclid Van der Pol/Osc 2/Freq": 241.36705346180662,
      "/Euclid Van der Pol/Osc 3/Freq": 241.36705346180662,
      "/Euclid Van der Pol/Zita Light/Level": 0.4000000000000057,
      "/Euclid Van der Pol/Osc 1/Q": 15.652999999999999,
      "/Euclid Van der Pol/Osc 2/Q": 13.385,
      "/Euclid Van der Pol/Osc 3/Q": 16.031,
      "/Euclid Van der Pol/Osc 1/Force": 0.5804199999999999,
      "/Euclid Van der Pol/Osc 2/Force": 0.66034,
      "/Euclid Van der Pol/Osc 3/Force": 0.18081999999999998,
      "/Euclid Van der Pol/Sequencer/K2": 7,
      "/Euclid Van der Pol/Osc 1/Feedback": 0.07,
      "/Euclid Van der Pol/Osc 2/Feedback": 0.14,
      "/Euclid Van der Pol/Osc 3/Feedback": 0.36,
      "/Euclid Van der Pol/Osc 1/dt": 0.498,
      "/Euclid Van der Pol/Osc 2/dt": 0.8959999999999999,
      "/Euclid Van der Pol/Osc 3/dt": 0.8959999999999999,
      "/Euclid Van der Pol/Osc 1/Limit": 0.180082,
      "/Euclid Van der Pol/Osc 2/Limit": 0.210079,
      "/Euclid Van der Pol/Osc 3/Limit": 0.360064,
      "/Euclid Van der Pol/Sequencer/K3": 9,
      "/Euclid Van der Pol/Osc 1/DC Block": 88.28863031505912,
      "/Euclid Van der Pol/Osc 2/DC Block": 54.253600515227355,
      "/Euclid Van der Pol/Osc 3/DC Block": 2.9212671868559585,
      "/Euclid Van der Pol/Osc 1/Spread": 0.48,
      "/Euclid Van der Pol/Osc 2/Spread": 0.87,
      "/Euclid Van der Pol/Osc 3/Spread": 0.35,
      "/Euclid Van der Pol/Osc 1/DistAmt": 0.14,
      "/Euclid Van der Pol/Osc 2/DistAmt": 0.12,
      "/Euclid Van der Pol/Osc 3/DistAmt": 0.45,
      "/Euclid Van der Pol/Osc 1/Drive": 0.61,
      "/Euclid Van der Pol/Osc 2/Drive": 0.71,
      "/Euclid Van der Pol/Osc 3/Drive": 0.55
    },
    "mods": {
      "/Euclid Van der Pol/Sequencer/Clock": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Sequencer/N": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Zita Light/Dry/Wet Mix": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Sequencer/K1": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Osc 1/Freq": {
        "source": "r1",
        "amount": 0.037601031334349604
      },
      "/Euclid Van der Pol/Osc 2/Freq": {
        "source": "r2",
        "amount": 0.14193990384923547
      },
      "/Euclid Van der Pol/Osc 3/Freq": {
        "source": "r2",
        "amount": 0.018596428517016362
      },
      "/Euclid Van der Pol/Zita Light/Level": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Osc 1/Q": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Osc 2/Q": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Osc 3/Q": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Osc 1/Force": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Osc 2/Force": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Osc 3/Force": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Sequencer/K2": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Osc 1/Feedback": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Osc 2/Feedback": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Osc 3/Feedback": {
        "source": "-",
        "amount": 0.24737920792835677
      },
      "/Euclid Van der Pol/Osc 1/dt": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Osc 2/dt": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Osc 3/dt": {
        "source": "-",
        "amount": 0.03687939959392205
      },
      "/Euclid Van der Pol/Osc 1/Limit": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Osc 2/Limit": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Osc 3/Limit": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Sequencer/K3": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Osc 1/DC Block": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Osc 2/DC Block": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Osc 3/DC Block": {
        "source": "r1",
        "amount": 0.013686812020395598
      },
      "/Euclid Van der Pol/Osc 1/Spread": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Osc 2/Spread": {
        "source": "-",
        "amount": -0.05653277564481548
      },
      "/Euclid Van der Pol/Osc 3/Spread": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Osc 1/DistAmt": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Osc 2/DistAmt": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Osc 3/DistAmt": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Osc 1/Drive": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Osc 2/Drive": {
        "source": "-",
        "amount": 0
      },
      "/Euclid Van der Pol/Osc 3/Drive": {
        "source": "-",
        "amount": 0
      }
    }
  }
}